name: Manage VPN Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: deploy, start, stop, or destroy'
        required: true
        default: 'deploy'
        options:
          - deploy
          - start
          - stop
          - destroy
      stack:
        description: 'Pulumi stack to use (e.g., dev, staging, production)'
        required: true
        default: 'dev'

jobs:
  manage-vpn:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 3: Deploy infrastructure
    - name: Deploy Infrastructure
      if: ${{ github.event.inputs.action == 'deploy' }}
      uses: pulumi/actions@v4
      with:
        command: up
        stack-name: ${{ github.event.inputs.stack }}
        pulumi-version: ^3

    # Step 4: Destroy infrastructure
    - name: Destroy Infrastructure
      if: ${{ github.event.inputs.action == 'destroy' }}
      uses: pulumi/actions@v4
      with:
        command: destroy
        stack-name: ${{ github.event.inputs.stack }}
        pulumi-version: ^3

    # Step 5: Start EC2 instance
    - name: Start EC2 Instance
      if: ${{ github.event.inputs.action == 'start' }}
      run: |
        INSTANCE_ID=$(pulumi stack output instance_public_ip | xargs -n1 aws ec2 describe-instances --filters "Name=ip-address,Values={}" --query "Reservations[0].Instances[0].InstanceId" --output text)
        echo "Starting EC2 instance with ID: $INSTANCE_ID"
        aws ec2 start-instances --instance-ids $INSTANCE_ID

    # Step 6: Stop EC2 instance
    - name: Stop EC2 Instance
      if: ${{ github.event.inputs.action == 'stop' }}
      run: |
        INSTANCE_ID=$(pulumi stack output instance_public_ip | xargs -n1 aws ec2 describe-instances --filters "Name=ip-address,Values={}" --query "Reservations[0].Instances[0].InstanceId" --output text)
        echo "Stopping EC2 instance with ID: $INSTANCE_ID"
        aws ec2 stop-instances --instance-ids $INSTANCE_ID
